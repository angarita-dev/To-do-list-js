!function(t){var e={};function i(o){if(e[o])return e[o].exports;var s=e[o]={i:o,l:!1,exports:{}};return t[o].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,o){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(o,s,function(e){return t[e]}.bind(null,s));return o},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var o=class{static saveAllProjects(t){localStorage.setItem("projects",JSON.stringify(t))}static saveProject(t,e,i){const o=localStorage.getItem("projects");let s;if(null===o)s=[{title:t,priority:e,toDo:[]}];else{s=JSON.parse(o);const r=void 0===s[i]?[]:s[i].toDo;s[i]={title:t,priority:e,toDo:r}}localStorage.setItem("projects",JSON.stringify(s))}static readProject(t){return JSON.parse(localStorage.getItem("projects"))[t]}static deleteProject(t){const e=JSON.parse(localStorage.getItem("projects"));e.splice(t,1),localStorage.setItem("projects",JSON.stringify(e))}static readProjects(){const t=JSON.parse(localStorage.getItem("projects"));return null==t?[]:t}};var s=class{static project(t,e){const i=document.createElement("template"),o=`\n      <li class='to-do-project'>\n        <div class='project-container text-container ${e}'>\n          <h4 class='text'>${t}</h4>\n        </div>\n        <div class='edit-container'>\n          <input class='text edit-project' value="${t}"/>\n          <div class="priority-edit">\n            <svg class="icon priority-icon low-priority">\n              <use xlink:href="#empty-priority"/>\n              <use class="full-priority" xlink:href="#full-priority"/>\n            </svg>\n            <svg class="icon priority-icon medium-priority">\n              <use xlink:href="#empty-priority"/>\n              <use class="full-priority" xlink:href="#full-priority"/>\n            </svg>\n            <svg class="icon priority-icon high-priority">\n              <use xlink:href="#empty-priority"/>\n              <use class="full-priority" xlink:href="#full-priority"/>\n            </svg>\n            <svg class="icon priority-icon uh-priority">\n              <use xlink:href="#empty-priority"/>\n              <use class="full-priority" xlink:href="#full-priority"/>\n            </svg>\n          </div>\n        </div>\n        <div class='icon-container'>\n          <svg class='icon save-icon'>\n            <use class='save-icon' xlink:href='#save-icon' />\n          </svg>\n          <svg class='icon edit-icon'>\n            <use class='edit-icon' xlink:href='#edit-icon' />\n          </svg>\n          <svg class='icon delete-icon'>\n            <use class='delete-icon delete-project-icon' xlink:href='#delete-icon' />\n          </svg>\n        </div>\n      </li>\n    `.trim();return i.innerHTML=o,i.content.firstChild}};class r{static removeSelected(){Array.from(document.getElementsByClassName("to-do-project")).filter(t=>t.classList.contains("selected")).forEach(t=>t.classList.remove("selected"))}togglePriority(){const t=this.projectContainer.querySelector(".priority-edit");Array.from(t.children).forEach(t=>{t.onclick=()=>{this.removeSelectedPriorityInput(),t.classList.add("selected")}})}removeSelectedPriorityInput(){const t=this.projectContainer.querySelector(".priority-edit");Array.from(t.children).forEach(t=>{t.classList.remove("selected")})}selectPriorityInput(){const t=this.projectContainer.querySelector(".priority-edit"),e=Array.from(t.children),i=this.projectContainer.querySelector(".project-container"),o=Array.from(i.classList).filter(t=>t.includes("-priority"))[0];this.removeSelectedPriorityInput(),e.forEach(t=>{Array.from(t.classList).reduce((t,e)=>t||e.includes(o),!1)&&t.classList.add("selected")})}static removeEdit(){Array.from(document.getElementsByClassName("to-do-project")).filter(t=>t.classList.contains("to-do-edit")).forEach(t=>t.classList.remove("to-do-edit"))}selectProject(){r.removeSelected(),this.projectContainer.classList.add("selected")}enterEdit(){r.removeEdit(),this.projectContainer.classList.add("to-do-edit")}exitEdit(t){const e=this.projectContainer.querySelector(".edit-container"),i=e.querySelector(".edit-project").value,o=e.querySelector(".selected"),s=Array.from(o.classList).filter(t=>t.includes("-priority"))[0];this.projectContainer.classList.remove("to-do-edit"),t(i,s)}editProject(t){this.selectProject(),this.enterEdit(),this.togglePriority();this.projectContainer.querySelector(".save-icon").onclick=()=>this.exitEdit(t)}static displayProject(t,e){const i=document.getElementById("projects-container"),o=s.project(t,e);return i.append(o),o}loaders(t,e){const i=this.projectContainer.querySelector(".icon-container"),o=i.querySelector(".edit-icon"),s=i.querySelector(".delete-icon");this.selectPriorityInput(),o.onclick=()=>{const e=t();this.editProject(e)},s.onclick=()=>{e()}}constructor(t,e,i,o){this.projectContainer=r.displayProject(t,e),this.loaders(i,o)}changeTitle(t){this.projectContainer.querySelector(".text-container").querySelector(".text").textContent=t}changePriority(t){const e=this.projectContainer.firstElementChild,i=Array.from(e.classList).filter(t=>t.includes("-priority"))[0];e.classList.remove(i),e.classList.add(t)}reDisplay(t,e){const i=this.projectContainer.querySelector(".text-container").querySelector(".text"),o=this.projectContainer.firstElementChild,s=Array.from(o.classList).filter(t=>t.includes("-priority"))[0];i.textContent=t,o.classList.remove(s),o.classList.add(e),this.selectPriorityInput()}removeElement(){this.projectContainer.remove()}}var n=r;var c=class{static toDo(t,e,i,o,s,r){const n=r.toISOString().substring(0,10),c=document.createElement("template"),l=`\n      <li class="to-do-item ${s?"checked":""}">\n        <div class="to-do-header">\n          <div class="header-left">\n            <h3 class="to-do-title">${t}</h3>\n            <span class="${i} enter-edit-mode to-do-priority"/>\n          </div>\n          <p class="to-do-date">${o}</p>\n          <div class="icon-container">\n            <svg class="icon checked-icon">\n              <use class="unchecked-symbol" xlink:href="#checked-icon"/>\n              <use class="checked-symbol" xlink:href="#unchecked-icon"/>\n            </svg> \n            <svg class="icon edit-icon">\n              <use xlink:href="#edit-icon">\n            </svg>\n            <svg class="icon delete-icon">\n              <use xlink:href="#delete-icon">\n            </svg>\n          </div>\n        </div>\n        <div class="to-do-body">\n          <p class="to-do-description">${e}</p>\n        </div>\n        <div class="edit-container">\n          <div class="to-do-header">\n            <input class="to-do-title-edit" type="text" value="${t}">\n            <svg class="icon save-icon">\n              <use xlink:href="#save-icon"/>\n            </svg>\n          </div>\n          <div class="priority-edit">\n            <svg class="icon priority-icon low-priority">\n              <use xlink:href="#empty-priority"/>\n              <use class="full-priority" xlink:href="#full-priority"/>\n            </svg>\n            <svg class="icon priority-icon medium-priority">\n              <use xlink:href="#empty-priority"/>\n              <use class="full-priority" xlink:href="#full-priority"/>\n            </svg>\n            <svg class="icon priority-icon high-priority">\n              <use xlink:href="#empty-priority"/>\n              <use class="full-priority" xlink:href="#full-priority"/>\n            </svg>\n            <svg class="icon priority-icon uh-priority">\n              <use xlink:href="#empty-priority"/>\n              <use class="full-priority" xlink:href="#full-priority"/>\n            </svg>\n          </div>\n          <input class="to-do-date-edit" type="date" value="${n}">\n          <input class="to-do-description-edit" type="text" value="${e}">\n        </div>\n      </li>\n    `.trim();return c.innerHTML=l,c.content.firstElementChild}};class l{static parseDate(t){const e=t.getUTCDate(),i=t.getUTCMonth()+1,o=t.getUTCFullYear();return i<10?`${e}-0${i}-${o}`:`${e}-${i}-${o}`}static removeSelected(){Array.from(document.getElementsByClassName("to-do-item")).filter(t=>t.classList.contains("selected")).forEach(t=>t.classList.remove("selected"))}selectToDo(){l.removeSelected(),this.toDoContainer.classList.add("selected")}static removeEdit(){Array.from(document.getElementsByClassName("to-do-item")).filter(t=>t.classList.contains("edit")).forEach(t=>t.classList.remove("edit"))}removeSelectedPriorityInput(){const t=this.toDoContainer.querySelector(".priority-edit");Array.from(t.children).forEach(t=>{t.classList.remove("selected")})}togglePriority(){const t=this.toDoContainer.querySelector(".priority-edit");Array.from(t.children).forEach(t=>{t.onclick=()=>{this.removeSelectedPriorityInput(),t.classList.add("selected")}})}selectPriorityInput(){const t=this.toDoContainer.querySelector(".priority-edit"),e=Array.from(t.children),i=this.toDoContainer.querySelector(".to-do-priority"),o=Array.from(i.classList).filter(t=>"to-do-priority"!==t&&t.includes("-priority"))[0];this.removeSelectedPriorityInput(),e.forEach(t=>{Array.from(t.classList).reduce((t,e)=>t||e.includes(o),!1)&&t.classList.add("selected")})}exitEdit(t){const e=this.toDoContainer.querySelector(".edit-container"),i=e.querySelector(".to-do-title-edit").value,o=e.querySelector(".to-do-date-edit").valueAsDate,s=e.querySelector(".to-do-description-edit").value,r=e.querySelector(".selected"),n=Array.from(r.classList).filter(t=>t.includes("-priority"))[0];this.toDoContainer.classList.remove("edit"),t(i,s,n,o)}editToDo(t){l.removeEdit(),this.selectToDo(),this.togglePriority(),this.toDoContainer.classList.add("edit");this.toDoContainer.querySelector(".save-icon").onclick=()=>{this.exitEdit(t)}}static displayToDo(t,e,i,o,s){const r=l.parseDate(o),n=document.getElementById("to-do-container"),a=c.toDo(t,e,i,r,s,o);return n.append(a),a}toggleCheck(){this.toDoContainer.classList.toggle("checked")}loaders(t,e,i){const o=this.toDoContainer.querySelector(".icon-container"),s=o.querySelector(".edit-icon"),r=o.querySelector(".delete-icon"),n=o.querySelector(".checked-icon");this.toDoContainer.onclick=t=>{const{tagName:e}=t.target;"svg"!==e&&"use"!==e&&this.selectToDo()},s.onclick=()=>{const e=t();this.editToDo(e)},r.onclick=()=>{e(),this.toDoContainer.remove()},n.onclick=()=>{i(),this.toggleCheck()}}constructor(t,e,i,o,s,r,n,c){this.toDoContainer=l.displayToDo(t,e,i,o,s),this.selectPriorityInput(),this.loaders(r,n,c)}reDisplayValues(t,e,i,o){const s=this.toDoContainer.querySelector(".to-do-header"),r=s.querySelector(".to-do-title"),n=s.querySelector(".to-do-date"),c=this.toDoContainer.querySelector(".to-do-description"),a=s.querySelector(".to-do-priority"),d=Array.from(a.classList).filter(t=>t.includes("-priority"))[0];a.classList.remove(d),a.classList.add(i),r.textContent=t,n.textContent=l.parseDate(o),c.textContent=e;const h=this.toDoContainer.querySelector(".edit-container"),p=h.querySelector(".to-do-title-edit"),y=h.querySelector(".to-do-date-edit"),u=h.querySelector(".to-do-description-edit");p.value=t,y.value=new Date(o).toISOString().substring(0,10),u.value=e,this.selectPriorityInput()}removeElement(){this.toDoContainer.remove()}}var a=l;var d=class{static saveToDo(t,e,i,o,s,r,n){const c=JSON.parse(localStorage.getItem("projects")),l={name:t,description:e,dueDate:o,priority:i,checked:s};c[r].toDo[n]=l,localStorage.setItem("projects",JSON.stringify(c))}static removeToDo(t,e){const i=JSON.parse(localStorage.getItem("projects"));i[t].toDo.splice(e,1),localStorage.setItem("projects",JSON.stringify(i))}static saveChecked(t,e,i){const o=JSON.parse(localStorage.getItem("projects"));o[t].toDo[e].checked=i,localStorage.setItem("projects",JSON.stringify(o))}};var h=class{displayToDo(){this.display=new a(this.name,this.description,this.priority,this.dueDate,this.checked,this.handleToDoEdit.bind(this),this.handleToDoDelete.bind(this),this.handleCheckedToggle.bind(this))}constructor(t,e,i,o="To-do",s="To-do description",r="low-priority",n=new Date,c=!1){this.name=o,this.description=s,this.priority=r,this.dueDate=new Date(n),this.toDoIndex=e,this.projectIndex=t,this.checked=c,this.reDisplay=i}saveToDo(){d.saveToDo(this.name,this.description,this.priority,this.dueDate,this.checked,this.projectIndex,this.toDoIndex)}handleToDoEdit(){return(t,e,i,o)=>{this.name=t,this.description=e,this.priority=i,this.dueDate=o,this.display.reDisplayValues(t,e,i,o),this.saveToDo(),this.reDisplay()}}handleToDoDelete(){this.display.removeElement(),d.removeToDo(this.projectIndex,this.toDoIndex)}handleCheckedToggle(){this.checked=!this.checked,d.saveChecked(this.projectIndex,this.toDoIndex,this.checked),this.reDisplay()}selectAndEdit(){this.display.selectToDo(),this.display.editToDo(this.handleToDoEdit())}};var p=class{sortToDos(){const t=["uh-priority","high-priority","medium-priority","low-priority"],e=e=>t.indexOf(e);this.toDoList.sort((t,i)=>{if(t.checked&&!i.checked)return 1;if(t.checked&&i.checked)return 0;if(!t.checked&&i.checked)return-1;const o=e(t.priority),s=e(i.priority);return o<s?-1:o>s?1:0})}reIndex(t){this.projectIndex=t,this.toDoList.forEach(e=>{e.projectIndex=t})}saveToDos(){this.toDoList.forEach(t=>t.saveToDo())}displayToDos(){document.getElementById("to-do-container").innerHTML="",this.saveToDos(),this.toDoList.forEach(t=>t.displayToDo())}reDisplayToDos(){this.sortToDos(),this.displayToDos()}addToDo(){this.toDoIndex+=1;const t=new h(this.projectIndex,this.toDoIndex,this.reDisplayToDos.bind(this));this.toDoList.unshift(t),this.displayToDos(),t.selectAndEdit()}loadNewToDo(){document.getElementById("add-to-do-icon").onclick=()=>this.addToDo()}constructor(t,e){this.projectIndex=t;const i=e.map((t,e)=>new h(this.projectIndex,e,this.reDisplayToDos.bind(this),t.name,t.description,t.priority,t.dueDate,t.checked));this.toDoList=i,this.toDoIndex=i.length-1,this.sortToDos(),this.loadNewToDo()}getToDos(){return this.toDoList.map(t=>({name:t.name,description:t.description,priority:t.priority,dueDate:t.dueDate,checked:t.checked}))}};var y=class{constructor(t,e,i,o="To-do Project",s="low-priority",r=[]){this.name=o,this.priority=s,this.index=i,this.deleteHandler=e,this.reDisplay=t,this.toDoManager=new p(i,r)}displayToDos(){this.toDoManager.displayToDos(),this.toDoManager.loadNewToDo()}selectProject(){this.display.selectProject()}saveProject(){o.saveProject(this.name,this.priority,this.index)}selectAndEdit(){this.display.selectProject(),this.display.editProject(this.handleProjectEdit())}handleProjectEdit(){return(t,e)=>{this.name=t,this.priority=e,this.display.changeTitle(this.name),this.display.changePriority(this.priority),this.saveProject(),this.reDisplay()}}handleProjectDelete(){this.display.removeElement(),this.deleteHandler(this.index)}displayProject(){this.display=new n(this.name,this.priority,this.handleProjectEdit.bind(this),this.handleProjectDelete.bind(this))}setIndex(t){this.index=t,this.toDoManager.reIndex(t)}};var u=class{static emptyToDoList(){const t=document.createElement("template"),e='\n      <li class="empty-to-do">\n        <span class="low-priority"></span>\n        <span class="medium-priority"></span>\n        <span class="high-priority"></span>\n        <span class="uh-priority"></span>\n        <p>Please create a Project</p>\n        <span class="uh-priority"></span>\n        <span class="high-priority"></span>\n        <span class="medium-priority"></span>\n        <span class="low-priority"></span>\n      </li>\n    '.trim();return t.innerHTML=e,t.content.firstChild}};class m{static clearToDoList(){document.getElementById("to-do-container").innerHTML=""}static clearProjectList(){document.getElementById("projects-container").innerHTML=""}static loadNewProject(t){document.getElementById("add-project-icon").onclick=()=>{t()}}static displayNewTitle(t,e){const i=document.getElementById("project-title"),o=Array.from(i.classList).filter(t=>t.includes("-priority"))[0];i.textContent=t,i.classList.remove(o),i.classList.add("title-"+e)}static disableToDoCreation(){const t=document.getElementById("to-do-container");document.getElementById("add-to-do-icon").onclick="",m.clearToDoList(),t.appendChild(u.emptyToDoList())}}var v=m;(new class{sortProjects(){const t=["uh-priority","high-priority","medium-priority","low-priority"],e=e=>t.indexOf(e);this.projects.sort((t,i)=>{const o=e(t.priority),s=e(i.priority);return s<o?1:s>o?-1:0})}reIndexProjects(){this.projects.forEach((t,e)=>{t.setIndex(e)})}addProject(){const t=new y(this.reDisplayProject.bind(this),this.deleteProjectHandler.bind(this),0);this.projects.unshift(t),this.reIndexProjects(),this.saveProjects(),this.displayProjects(),t.selectAndEdit(),this.selectProject(t)}loadNewProject(){v.loadNewProject(this.addProject.bind(this))}saveProjects(){const t=this.projects.map(t=>{const{name:e}=t,{priority:i}=t;return{name:e,priority:i,toDo:t.toDoManager.getToDos()}});o.saveAllProjects(t)}selectProject(t){const e=t.name,i=t.priority;v.displayNewTitle(e,i),this.toDoManager=t.toDoManager,t.selectProject(),this.displayToDos()}displayToDos(){this.toDoManager.displayToDos(),this.toDoManager.loadNewToDo()}displayProjects(){v.clearProjectList(),this.saveProjects(),this.projects.forEach(t=>{t.displayProject();const e=t.display.projectContainer;e.onclick=i=>{const o=e.classList.contains("to-do-edit"),s=i.target.classList.contains("delete-icon");o||s||this.selectProject(t)}})}reDisplayProject(){this.sortProjects(),this.reIndexProjects(),this.saveProjects(),this.displayProjects()}selectFirstProject(){if(0===this.projects.length)v.clearProjectList(),v.disableToDoCreation(),v.displayNewTitle("To-do app","medium-priority");else{const t=this.projects[0];this.selectProject(t)}}deleteProjectHandler(t){this.projects.splice(t,1),this.reIndexProjects(),this.saveProjects(),this.selectFirstProject()}constructor(){const t=o.readProjects().map((t,e)=>new y(this.reDisplayProject.bind(this),this.deleteProjectHandler.bind(this),e,t.name,t.priority,t.toDo));this.projects=t}firstLoad(){this.displayProjects(),this.selectFirstProject(),this.loadNewProject()}}).firstLoad()}]);